/* DO NOT EDIT THIS FILE
 * - Copyright: Prof. Kevin Andrea, George Mason University.  All Rights Reserved
 * - Date: Aug 2022
 */

#ifndef AVAN_SCHED_H
#define AVAN_SCHED_H

#include "vm_settings.h"

// Process Node Definition
typedef struct process_node {
  pid_t pid; // PID of the Process you're Tracking
  char cmd[MAX_CMD]; // Name of the Process being run
  int flags; // Contains the current State of the Process AND the Exit Code (set by OS).
  int priority; // The Priority Level of the Process (from 1 - 255)
  int skips; // The number of times this was not selected.
  struct process_node *next; // Pointer to next Process Node in a linked list.
} process_node_t;

// Queue Header Definition
typedef struct queue_header {
  int count; // How many items are in this linked list?
  process_node_t *head; // Points to FIRST node of linked list.  No Dummy Nodes.
} queue_header_t;

// Schedule Header Definition
typedef struct avan_header {
  queue_header_t *ready_queue; // Linked List of Processes ready to Run on CPU
  queue_header_t *suspended_queue; // Linked List of Processes suspended
  queue_header_t *terminated_queue; // Linked List of Terminated Processes 
} avan_header_t;

// Prototypes
avan_header_t *avan_create(); 
int avan_insert(avan_header_t *header, process_node_t *process);
int avan_suspend(avan_header_t *header, pid_t pid);
int avan_resume(avan_header_t *header, pid_t pid);
int avan_quit(avan_header_t *header, process_node_t *process, int exit_code);
int avan_terminate(avan_header_t *header, pid_t pid, int exit_code);
process_node_t *avan_new_process(char *command, pid_t pid, int priority, int critical);
process_node_t *avan_select(avan_header_t *header);
int avan_get_size(queue_header_t *ll);
void avan_cleanup(avan_header_t *header);

#endif
